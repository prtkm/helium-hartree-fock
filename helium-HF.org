

#+BEGIN_SRC python
import numpy as np
import itertools


def Suv(z1, z2):
    ''' 
    Returns each of the overlap term
    '''
    return (((z1 ** 3) * (z2 ** 3) / np.pi ** 2) ** 0.5) * 2 / (z1 + z2) ** 3 * 4 * np.pi 


def Tuv(z1, z2):
    '''
    Returns the kinetic energy integrals
    '''
    return 4 * z1 * z2 * np.sqrt(z1 ** 3 * z2 ** 3 ) / (z1 + z2) ** 3 


def Vuv(z1, z2):
    '''
    Returns the nuclear attraction integrals
    '''
    return - 8 * np.sqrt((z1 ** 3 * z2 ** 3)) / (z1 + z2) ** 2  


def Huv(z1, z2):
    '''
    Returns core hamiltonian elements
    '''
    return Tuv(z1, z2) + Vuv(z1, z2)


def I_two_electron(z):
    '''
    Calculates the two electron integrals
    Args: z = [z1, z2, z3, z4]
    Returns: (z1 z2 | z3 z4)
    '''
    A = np.prod(z) ** 1.5
    
    u = z[0] + z[1]
    v = z[2] + z[3]
    
    integral = 32 * A / u ** 2 * (1 / (u * v ** 2) - 1 / (u + v) ** 3 - 1 / u / (u + v) ** 2)
    return integral


def density_matrix(z1, z2, k):
    '''
    Returns elements of the density matrix
    '''

    S12 = Suv(z1, z2)
    C21 = (1 + k ** 2 + 2 * k * S12) ** -0.5

    P11 = 2 * C21 ** 2 * k ** 2
    P12 = 2 * k * C21 ** 2 
    P21 = P12
    P22 = 2 * C21 ** 2    
    P =  np.array([[P11, P12],
                   [P21, P22]])
    return P


def G():

    for mu, nu in munus:    

        g = 0
        for ls in lambdasigmas:
            l, s = ls

            int1 = I_two_electron((mu, nu, s, l))
            int2 = I_two_electron((mu , l, s, nu))
  
            g += P[mu - 1, nu - 1] * (int1 - 0.5 * int2)


ks = [1,2]

zetas = {1:1.45, 2:2.91}

products = list(itertools.product(ks,repeat=4))

munus = list(itertools.product(ks,repeat=2))
print munus

P = density_matrix(1.45, 2.91, 2)
print P

for mu, nu in munus: 
    print P[mu-1, nu-1]

lambdasigmas =  list(itertools.product(ks,repeat=2))

for product in products:
    z = []
    for p in product:
        #z += zetas[p] 
        z.append(zetas[p])
    print product, z, I_two_electron(z)

#S122 = 0.8366


print P[1,1]

#print density_matrix(S12, 2)[0] / 4.    

#print Suv(2.91, 2.91)
#print Tuv(1.45, 1.45)
print Huv(1.45, 1.45)
#+END_SRC

#+RESULTS:
#+begin_example
[(1, 1), (1, 2), (2, 1), (2, 2)]
[[ 0.95849341  0.4792467 ]
 [ 0.4792467   0.23962335]]
0.958493408063
0.479246704031
0.479246704031
0.239623352016
(1, 1, 1, 1) [1.45, 1.45, 1.45, 1.45] 0.90625
(1, 1, 1, 2) [1.45, 1.45, 1.45, 2.91] 0.90328096898
(1, 1, 2, 1) [1.45, 1.45, 2.91, 1.45] 0.90328096898
(1, 1, 2, 2) [1.45, 1.45, 2.91, 2.91] 1.182589196
(1, 2, 1, 1) [1.45, 2.91, 1.45, 1.45] 0.90328096898
(1, 2, 1, 2) [1.45, 2.91, 1.45, 2.91] 0.953631357046
(1, 2, 2, 1) [1.45, 2.91, 2.91, 1.45] 0.953631357046
(1, 2, 2, 2) [1.45, 2.91, 2.91, 2.91] 1.2979962751
(2, 1, 1, 1) [2.91, 1.45, 1.45, 1.45] 0.90328096898
(2, 1, 1, 2) [2.91, 1.45, 1.45, 2.91] 0.953631357046
(2, 1, 2, 1) [2.91, 1.45, 2.91, 1.45] 0.953631357046
(2, 1, 2, 2) [2.91, 1.45, 2.91, 2.91] 1.2979962751
(2, 2, 1, 1) [2.91, 2.91, 1.45, 1.45] 1.182589196
(2, 2, 1, 2) [2.91, 2.91, 1.45, 2.91] 1.2979962751
(2, 2, 2, 1) [2.91, 2.91, 2.91, 1.45] 1.2979962751
(2, 2, 2, 2) [2.91, 2.91, 2.91, 2.91] 1.81875
0.239623352016
-1.84875
#+end_example

#+BEGIN_SRC sh
ls
#+END_SRC

#+RESULTS:
: helium-HF.org



